#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Elasticsearch ËøûÊé•ËØäÊñ≠ËÑöÊú¨
"""

import requests
import socket
import subprocess
import time
import os

def check_port_open():
    """Ê£ÄÊü•Á´ØÂè£ÊòØÂê¶ÂºÄÊîæ"""
    print("üîç Ê£ÄÊü•Á´ØÂè£9200ÊòØÂê¶ÂºÄÊîæ...")
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('localhost', 9200))
        sock.close()
        
        if result == 0:
            print("‚úÖ Á´ØÂè£9200Â∑≤ÂºÄÊîæ")
            return True
        else:
            print("‚ùå Á´ØÂè£9200Êú™ÂºÄÊîæ")
            return False
            
    except Exception as e:
        print(f"‚ùå Á´ØÂè£Ê£ÄÊü•Â§±Ë¥•: {e}")
        return False

def check_es_process():
    """Ê£ÄÊü•ESËøõÁ®ãÊòØÂê¶ËøêË°å"""
    print("\nüîç Ê£ÄÊü•ElasticsearchËøõÁ®ã...")
    
    try:
        # Ê£ÄÊü•JavaËøõÁ®ã
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq java.exe'], 
                              capture_output=True, text=True, shell=True)
        
        if 'java.exe' in result.stdout:
            print("‚úÖ ÂèëÁé∞JavaËøõÁ®ã")
            # ÊòæÁ§∫JavaËøõÁ®ãËØ¶ÊÉÖ
            java_processes = [line for line in result.stdout.split('\n') if 'java.exe' in line]
            for process in java_processes[:3]:  # ÊòæÁ§∫Ââç3‰∏™
                print(f"   {process.strip()}")
            return True
        else:
            print("‚ùå Êú™ÂèëÁé∞JavaËøõÁ®ã")
            return False
            
    except Exception as e:
        print(f"‚ùå ËøõÁ®ãÊ£ÄÊü•Â§±Ë¥•: {e}")
        return False

def check_es_config():
    """Ê£ÄÊü•ESÈÖçÁΩÆÊñá‰ª∂"""
    print("\nüîç Ê£ÄÊü•ElasticsearchÈÖçÁΩÆ...")
    
    es_path = r"D:\xmc\elasticsearch-9.1.0-windows-x86_64\elasticsearch-9.1.0"
    
    # Ê£ÄÊü•ÁõÆÂΩïÊòØÂê¶Â≠òÂú®
    if os.path.exists(es_path):
        print(f"‚úÖ ESÁõÆÂΩïÂ≠òÂú®: {es_path}")
        
        # Ê£ÄÊü•ÂÖ≥ÈîÆÊñá‰ª∂
        key_files = [
            "bin\\elasticsearch.bat",
            "config\\elasticsearch.yml",
            "config\\jvm.options"
        ]
        
        for file in key_files:
            full_path = os.path.join(es_path, file)
            if os.path.exists(full_path):
                print(f"‚úÖ {file} Â≠òÂú®")
            else:
                print(f"‚ùå {file} ‰∏çÂ≠òÂú®")
    else:
        print(f"‚ùå ESÁõÆÂΩï‰∏çÂ≠òÂú®: {es_path}")
        return False
    
    return True

def test_http_connection():
    """ÊµãËØïHTTPËøûÊé•"""
    print("\nüîç ÊµãËØïHTTPËøûÊé•...")
    
    urls = [
        "http://localhost:9200",
        "http://127.0.0.1:9200"
    ]
    
    for url in urls:
        try:
            print(f"   Â∞ùËØïËøûÊé•: {url}")
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {url} ËøûÊé•ÊàêÂäü")
                info = response.json()
                print(f"   ÁâàÊú¨: {info.get('version', {}).get('number', 'N/A')}")
                print(f"   ÈõÜÁæ§: {info.get('cluster_name', 'N/A')}")
                return True
            else:
                print(f"‚ùå {url} ÂìçÂ∫îÂºÇÂ∏∏: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print(f"‚ùå {url} ËøûÊé•Ë¢´ÊãíÁªù")
        except requests.exceptions.Timeout:
            print(f"‚ùå {url} ËøûÊé•Ë∂ÖÊó∂")
        except Exception as e:
            print(f"‚ùå {url} ËøûÊé•Â§±Ë¥•: {e}")
    
    return False

def check_system_resources():
    """Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê"""
    print("\nüîç Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê...")
    
    try:
        # Ê£ÄÊü•ÂÜÖÂ≠ò‰ΩøÁî®
        result = subprocess.run(['wmic', 'computersystem', 'get', 'TotalPhysicalMemory'], 
                              capture_output=True, text=True, shell=True)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:
                total_memory = int(lines[1]) / (1024**3)  # ËΩ¨Êç¢‰∏∫GB
                print(f"‚úÖ ÊÄªÂÜÖÂ≠ò: {total_memory:.1f} GB")
                
                if total_memory < 4:
                    print("‚ö†Ô∏è  ÂÜÖÂ≠òÂèØËÉΩ‰∏çË∂≥ÔºåÂª∫ËÆÆËá≥Â∞ë4GB")
        
        # Ê£ÄÊü•Á£ÅÁõòÁ©∫Èó¥
        es_path = r"D:\xmc\elasticsearch-9.1.0-windows-x86_64\elasticsearch-9.1.0"
        if os.path.exists(es_path):
            free_space = os.statvfs(es_path).f_frsize * os.statvfs(es_path).f_bavail
            free_gb = free_space / (1024**3)
            print(f"‚úÖ ÂèØÁî®Á£ÅÁõòÁ©∫Èó¥: {free_gb:.1f} GB")
            
            if free_gb < 1:
                print("‚ö†Ô∏è  Á£ÅÁõòÁ©∫Èó¥ÂèØËÉΩ‰∏çË∂≥")
                
    except Exception as e:
        print(f"‚ùå ËµÑÊ∫êÊ£ÄÊü•Â§±Ë¥•: {e}")

def suggest_solutions():
    """Êèê‰æõËß£ÂÜ≥ÊñπÊ°àÂª∫ËÆÆ"""
    print("\nüí° Ëß£ÂÜ≥ÊñπÊ°àÂª∫ËÆÆ:")
    print("=" * 50)
    
    print("1. ÂêØÂä®Elasticsearch:")
    print("   cd D:\\xmc\\elasticsearch-9.1.0-windows-x86_64\\elasticsearch-9.1.0")
    print("   .\\bin\\elasticsearch.bat")
    print("")
    
    print("2. Á≠âÂæÖÂêØÂä®ÂÆåÊàêÔºàÈÄöÂ∏∏ÈúÄË¶Å30-60ÁßíÔºâ")
    print("")
    
    print("3. Ê£ÄÊü•ÂêØÂä®Êó•Âøó:")
    print("   Êü•ÁúãÊéßÂà∂Âè∞ËæìÂá∫ÊàñlogsÁõÆÂΩï‰∏ãÁöÑÊó•ÂøóÊñá‰ª∂")
    print("")
    
    print("4. Â∏∏ËßÅÈóÆÈ¢ò:")
    print("   - ÂÜÖÂ≠ò‰∏çË∂≥: ÁºñËæëconfig\\jvm.optionsÔºåËÆæÁΩÆ-Xms1g -Xmx1g")
    print("   - Á´ØÂè£Ë¢´Âç†Áî®: Ê£ÄÊü•ÊòØÂê¶ÊúâÂÖ∂‰ªñESÂÆû‰æãËøêË°å")
    print("   - ÊùÉÈôêÈóÆÈ¢ò: ‰ª•ÁÆ°ÁêÜÂëòË∫´‰ªΩËøêË°å")
    print("")
    
    print("5. È™åËØÅÂêØÂä®:")
    print("   python test_es_status.py")

def main():
    """‰∏ªÂáΩÊï∞"""
    print("üöÄ Elasticsearch ËøûÊé•ËØäÊñ≠")
    print("=" * 50)
    
    # Ê£ÄÊü•ÈÖçÁΩÆ
    if not check_es_config():
        print("\n‚ùå ESÈÖçÁΩÆÊúâÈóÆÈ¢òÔºåËØ∑Ê£ÄÊü•ÂÆâË£ÖË∑ØÂæÑ")
        suggest_solutions()
        return
    
    # Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê
    check_system_resources()
    
    # Ê£ÄÊü•ËøõÁ®ã
    if not check_es_process():
        print("\n‚ùå ESËøõÁ®ãÊú™ËøêË°å")
        suggest_solutions()
        return
    
    # Ê£ÄÊü•Á´ØÂè£
    if not check_port_open():
        print("\n‚ùå ESÁ´ØÂè£Êú™ÂºÄÊîæ")
        suggest_solutions()
        return
    
    # ÊµãËØïHTTPËøûÊé•
    if not test_http_connection():
        print("\n‚ùå HTTPËøûÊé•Â§±Ë¥•")
        suggest_solutions()
        return
    
    print("\n‚úÖ ÊâÄÊúâÊ£ÄÊü•ÈÄöËøáÔºåESÂ∫îËØ•Ê≠£Â∏∏ËøêË°å")
    print("üí° Â¶ÇÊûú‰ªçÊúâÈóÆÈ¢òÔºåËØ∑Ê£ÄÊü•ESÂêØÂä®Êó•Âøó")

if __name__ == "__main__":
    main() 